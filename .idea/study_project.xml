<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="course">
        <Course>
          <option name="authors">
            <list>
              <StepicUser>
                <option name="accessToken" value="" />
                <option name="firstName" value="jaad" />
                <option name="guest" value="false" />
                <option name="id" value="-1" />
                <option name="lastName" value="" />
                <option name="refreshToken" value="" />
              </StepicUser>
            </list>
          </option>
          <option name="courseMode" value="Course Creator" />
          <option name="courseType" value="PyCharm" />
          <option name="description" value="Apprendre la programmation avec Python" />
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="lessons">
            <list>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Hello world" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;h1&gt;Apprendre la programmation avec Python&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Un language de programmation permet de controller un ordinateur :&#10;    faire des calculs, lire des sons, créer des jeux vidéos...&lt;/p&gt;&#10;&lt;p&gt;&#10;    Ici nous allons faire du Python :&#10;    c'est un language simple créé par Guido van Rossum le 20 février 1991.&#10;&lt;/p&gt;&#10;&lt;div style=&quot;text-align:center&quot;&gt;&#10;    &lt;img src=&quot;python.png&quot; alt=&quot;python&quot;&gt;&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Quand on apprend un nouveau language, on a pour habitude de commencer par écrire&#10;    un progamme très simple : un &lt;b&gt;&quot;hello world&quot;&lt;/b&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="length" value="18" />
                                      <option name="offset" value="116" />
                                      <option name="selected" value="false" />
                                      <option name="subtaskInfos">
                                        <map>
                                          <entry key="0">
                                            <value>
                                              <AnswerPlaceholderSubtaskInfo>
                                                <option name="answer" value="" />
                                                <option name="hasFrame" value="true" />
                                                <option name="hints">
                                                  <list />
                                                </option>
                                                <option name="needInsertText" value="false" />
                                                <option name="placeholderText" value="Tape ton nom ici !" />
                                                <option name="possibleAnswer" value="Guido van Rossum" />
                                                <option name="selected" value="false" />
                                                <option name="status" value="Solved" />
                                              </AnswerPlaceholderSubtaskInfo>
                                            </value>
                                          </entry>
                                        </map>
                                      </option>
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="202" />
                                      <option name="selected" value="false" />
                                      <option name="subtaskInfos">
                                        <map>
                                          <entry key="0">
                                            <value>
                                              <AnswerPlaceholderSubtaskInfo>
                                                <option name="answer" value="" />
                                                <option name="hasFrame" value="true" />
                                                <option name="hints">
                                                  <list />
                                                </option>
                                                <option name="needInsertText" value="false" />
                                                <option name="placeholderText" value="tape ce que tu veux" />
                                                <option name="possibleAnswer" value="tape ce que tu veux" />
                                                <option name="selected" value="false" />
                                                <option name="status" value="Solved" />
                                              </AnswerPlaceholderSubtaskInfo>
                                            </value>
                                          </entry>
                                        </map>
                                      </option>
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="2" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Les opérations" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Le calcul&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Avec un language de programmation, il est possible de faire des calculs (comme avec une calculatrice) &lt;span class=&quot;cole&quot;&gt;ex: 2 + 10&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Pour faire des calculs, on utilise des &lt;b&gt;opérateurs&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&lt;div class=&quot;block&quot;&gt;&#10;    &lt;ul&gt;&#10;        &lt;li&gt;+ : addition&lt;/li&gt;&#10;        &lt;li&gt;- : soustraction&lt;/li&gt;&#10;        &lt;li&gt;* : multiplication&lt;/li&gt;&#10;        &lt;li&gt;/ : division&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Un calcul se lit de gauche à droite, mais les multiplications et les divisions sont prioritaires &lt;span class=&quot;code&quot;&gt;ex: 2 + 2 * 10 =&gt; 22&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Il est possible d'utiliser des parenthèses afin de changer l'ordre de la priorité &lt;span class=&quot;code&quot;&gt;ex: (2 + 2) * 10 =&gt; 40&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="exercice 1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Cultivons des pommes&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Un fermier possède 30 pommiers&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Chaque pommier donne 17 pommes mais 2 sont mangés pas les oiseaux.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    A la fin, le fermier en garde 8 pour lui.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Combien peut il en vendre ?&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="11" />
                                      <option name="selected" value="false" />
                                      <option name="subtaskInfos">
                                        <map>
                                          <entry key="0">
                                            <value>
                                              <AnswerPlaceholderSubtaskInfo>
                                                <option name="answer" value="" />
                                                <option name="hasFrame" value="true" />
                                                <option name="hints">
                                                  <list />
                                                </option>
                                                <option name="needInsertText" value="false" />
                                                <option name="placeholderText" value="écris le calcul ici" />
                                                <option name="possibleAnswer" value="0" />
                                                <option name="selected" value="false" />
                                                <option name="status" value="Unchecked" />
                                              </AnswerPlaceholderSubtaskInfo>
                                            </value>
                                          </entry>
                                        </map>
                                      </option>
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="exercice 2" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Calculs&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Quel est le résultat des calculs suivants ?&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;1 + 2 * 3&lt;/li&gt;&#10;    &lt;li&gt;10 * 10 / 5 * 2&lt;/li&gt;&#10;    &lt;li&gt;1.5 + 1.5 * 2&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;div class=&quot;block&quot;&gt;&#10;    En informatique, la virgule s'écrit avec un &lt;span class=&quot;code&quot;&gt;.&lt;/span&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="3" />
                <option name="name" value="Les variables" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Les variables&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Une variable est un élément dans lequel on range une valeur.&#10;    &lt;br&gt;&#10;    Une variable a un nom : &lt;span class=&quot;code&quot;&gt;ex: toto&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    On utilise le signe &lt;span class=&quot;code&quot;&gt;=&lt;/span&gt; afin de ranger (affecter) une valeur&#10;    à une variable : &lt;span class=&quot;code&quot;&gt;ex: toto = 10&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Il est possible de changer la valeur d'une variable en utilisant encore le signe &lt;span class=&quot;code&quot;&gt;=&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Pour savoir ce qui est rangé dans une variable, on peut afficher son contenu avec &lt;span class=&quot;code&quot;&gt;print(toto)&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Le nom d'une variable est très important : il doit indiquer clairement ce qu'il représente (&lt;span class=&quot;code&quot;&gt;ex: nombre_de_pomme&lt;/span&gt;).&#10;&lt;/p&gt;&#10;&lt;div class=&quot;block&quot;&gt;&#10;    Les noms de variables peuvent comporter des lettres, des chiffres et le caractère souligné (_) mais ne commencent pas par un chiffre.&#10;    &lt;br&gt;&#10;    Les accents sont autorisés mais il est fortement recommandé de ne pas en mettre.&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Habituellement, on utilise l'anglais pour nommer les variables &lt;span class=&quot;code&quot;&gt;ex: apple_count&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="exercice 1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Cultivons des pommes 2&lt;/h1&gt;&#10;&lt;p&gt;Réécrire le problème suivant en utilisant des variables.&lt;/p&gt;&#10;&lt;hr&gt;&#10;&lt;p&gt;&#10;    Un fermier possède 30 pommiers&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Chaque pommier donne 17 pommes mais 2 sont mangés pas les oiseaux.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    A la fin, le fermier en garde 8 pour lui.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Combien peut il en vendre ?&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="exercice 2" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Question&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Si on écrit :&#10;&lt;/p&gt;&#10;&lt;p class=&quot;code&quot;&gt;&#10;    toto = 10 &lt;br&gt;&#10;    titi = 20 &lt;br&gt;&#10;    toto = titi &lt;br&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Que vaut &lt;span class=&quot;code&quot;&gt;toto&lt;/span&gt; à la fin ?&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Et comme ça ? :&#10;&lt;/p&gt;&#10;&lt;p class=&quot;code&quot;&gt;&#10;    toto = 10 &lt;br&gt;&#10;    titi = 20 &lt;br&gt;&#10;    toto = titi &lt;br&gt;&#10;    titi = 30 &lt;br&gt;&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="4" />
                <option name="name" value="Les chaines de caractères" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Chaines de caractères&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Nous avons un peu joué avec des nombres,&#10;    nous allons maintenant approfondir les chaines de caractères.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Une chaines de caractères est entourée pas des doubles quotes&#10;    &lt;span class=&quot;code&quot;&gt;ex: &quot;j'aime les pommes&quot;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    On a le droit d'utiliser des simples quotes&#10;    &lt;span class=&quot;code&quot;&gt;ex: 'et les cerises'&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Il faut respecter cette synthaxe d'ouverture et de fermeture de quotes sinon cela va générer une erreur&#10;&lt;/p&gt;&#10;&lt;pre class=&quot;code&quot;&gt;&#10;  File &quot;/Users/dbourdette/PycharmProjects/python_course/lesson4/task1/task.py&quot;, line 1&#10;    &quot;j'aime les pommes&#10;                     ^&#10;SyntaxError: EOL while scanning string literal&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Parfois, il y a une simple ou double quote dans la chaine.&#10;    Dans ce cas, on peut signaler qu'il ne s'agit pas de la gin de la chaine avec une &lt;span class=&quot;code&quot;&gt;\&lt;/span&gt; (antislash),&#10;    &lt;span class=&quot;code&quot;&gt;ex: 'j\'aime les pommes'&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    On peut ranger une chaine de caractères dans une variable &lt;span class=&quot;code&quot;&gt;ex: preferences = &quot;les pommes&quot;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Multiplier une chaine par un nombre crée une chaine plus longue&#10;    &lt;span class=&quot;code&quot;&gt;ex: 4 * &quot;hou &quot; =&gt; &quot;hou hou hou hou&quot;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Additionner 2 chaines les raccrochent ensemble (concaténation)&#10;    &lt;span class=&quot;code&quot;&gt;ex: &quot;ping&quot; + &quot;pong&quot; =&gt; &quot;pingpong&quot;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;div class=&quot;block&quot;&gt;&#10;    + et * sont appelés opérateurs. Ils servent a faire des opérations.&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Il y a d'autres opérations possibles en fonction du type de données,&#10;    on verra cela plus tard.&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="exercice 1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Quelques chaines&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Pour cet exercice, ecris 3 chaines de caractères sur ce que tu as ou vas faire aurjoud'hui&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="exercice 2" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Quelques chaines 2&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Que font les codes suivant :&#10;&lt;/p&gt;&#10;&lt;p class=&quot;code&quot;&gt;&#10;    print(7 * 'Na' + ' Batman')&#10;&lt;/p&gt;&#10;&lt;p class=&quot;code&quot;&gt;&#10;    space = ' ' &lt;br&gt;&#10;    print(4 * space + '*' + 3 * space + '*') &lt;br&gt;&#10;    print('') &lt;br&gt;&#10;    print(2 * space + '*' + 3 * space + '*' + 3 * space + '*') &lt;br&gt;&#10;    print(3 * space + '*' + 5 * space + '*') &lt;br&gt;&#10;    print(4 * space + '*****') &lt;br&gt;&#10;&lt;/p&gt;&#10;&lt;p class=&quot;code&quot;&gt;&#10;    print('voici quelques\nmots dans\nune phrase.')&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="5" />
                <option name="name" value="Les listes" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Listes&lt;/h1&gt;&#10;&lt;p&gt;&#10;    La liste est un autre type de données, un tout petit peu plus complexe. &lt;br&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;span class=&quot;code&quot;&gt;ex: courses = [&quot;chocolat&quot;, &quot;gateaux&quot;, &quot;lait&quot;]&lt;/span&gt; :&#10;    &lt;ul&gt;&#10;        &lt;li&gt;est une liste de 3 éléments&lt;/li&gt;&#10;        &lt;li&gt;le deuxième élément de cette liste est &quot;gateaux&quot;&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    La notation [ ] (crochet) permet d'accéder à un élément de la liste &lt;span class=&quot;code&quot;&gt;ex: courses[1] == &quot;gateaux&quot;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;div class=&quot;block&quot;&gt;&#10;    Attention: le premier élément est à l'index 0 !!!&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Il est possible de changer une valeur avec la même notation&#10;    &lt;span class=&quot;code&quot;&gt;ex: courses[1] = &quot;épinards&quot;&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Une liste peut contenir des nombres et des chaines en même temps&#10;    &lt;span class=&quot;code&quot;&gt;ex: divers = [&quot;un&quot;, 2, 3, &quot;quatre&quot;]&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    On peut additionner des listes &lt;span class=&quot;code&quot;&gt;ex: [&quot;a&quot;, &quot;b&quot;] + [&quot;c&quot;] == [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&lt;/span&gt;&#10;    (on parle alors de concaténation)&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Poura ajouter un élément à la liste, on appelle la méthode append&#10;    &lt;span class=&quot;code&quot;&gt;ex: [1, 2].append(3) == [1, 2, 3]&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;div class=&quot;block&quot;&gt;&#10;    Une méthode est un petit morceau de code qui agit sur un objet&#10;&lt;/div&gt;&#10;&lt;p&gt;&#10;    Pour supprimer, c'est un peu différent, on fait &lt;span class=&quot;code&quot;&gt;ex: del courses[1]&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="6" />
                <option name="name" value="Les tuples" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;/html&gt;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="0" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="7" />
                <option name="name" value="Les dictionnaires" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;style&gt;&#10;        .code {&#10;            font-size: 87.5%;&#10;            color: #e83e8c;&#10;            background-color: #ffe7f2;&#10;            word-break: break-word;&#10;            font-family: SFMono-Regular,Menlo,Monaco,Consolas,&quot;Liberation Mono&quot;,&quot;Courier New&quot;,monospace;&#10;            padding: 2px 5px;&#10;            border-radius: 5px;&#10;        }&#10;&#10;        .block {&#10;            padding: 10px;&#10;            background-color: #eee;&#10;            border-radius: 5px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;h1&gt;Dictionnaires&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Les dictionnaires permettent de ranger les données par clés - valeurs&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;span class=&quot;code&quot;&gt;ex: scores = {&quot;pierre&quot;: 3, &quot;jean&quot;: 10}&lt;/span&gt; :&#10;    &lt;ul&gt;&#10;        &lt;li&gt;c'est une variable &lt;span class=&quot;code&quot;&gt;scores&lt;/span&gt; qui pointe vers un dictionnaire&lt;/li&gt;&#10;        &lt;li&gt;la clée de la première est &lt;span class=&quot;code&quot;&gt;&quot;pierre&quot;&lt;/span&gt; et sa valeur est 3&lt;/li&gt;&#10;        &lt;li&gt;la clée de la première est &lt;span class=&quot;code&quot;&gt;&quot;jean&quot;&lt;/span&gt; et sa valeur est 10&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Les clées et les valeurs peuvent être de n'importe quels types : nombres, chaines, objets...&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Comme pour les listes, il est possible de lire une valeur avec la notation crochets &lt;span class=&quot;code&quot;&gt;print(scores[&quot;pierre&quot;])&lt;/span&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Ou bien de changer la valeur d'une entrée avec la même notation &lt;span class=&quot;code&quot;&gt;ex: scores[&quot;pierre&quot;] = 5&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Et enfin, on peut supprimer une entrée avec le mot clée del &lt;span class=&quot;code&quot;&gt;ex: del scores[&quot;pierre&quot;]&lt;/span&gt;&#10;&lt;/p&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="1" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
              <Lesson>
                <option name="id" value="0" />
                <option name="index" value="8" />
                <option name="name" value="La tortue" />
                <option name="updateDate" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="leçon" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="0" />
                      <option name="taskTexts">
                        <map>
                          <entry key="task" value="&lt;html&gt;&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;/html&gt;" />
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="index" value="0" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                    </EduTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
          <option name="name" value="Python Course" />
        </Course>
      </option>
      <option name="toolWindowMode" value="TEXT" />
      <option name="turnEditingMode" value="false" />
      <option name="VERSION" value="8" />
      <option name="myUserTests">
        <map />
      </option>
    </StudyTaskManager>
  </component>
</project>